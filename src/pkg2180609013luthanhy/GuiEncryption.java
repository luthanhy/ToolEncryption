/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg2180609013luthanhy;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.Buffer;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Base64;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author Administrator
 */
public class GuiEncryption extends javax.swing.JFrame {

    private String CheckMethodEncryption = null;
    private Ceasar EncrytionByCeasar = new Ceasar("100");
    private DES EncryptionbyDES = new DES();
    private VIGENERE EncryptionbyVIGENERE = new VIGENERE();
    private RAILFENCE EncryptionbyRAILFENCE = new RAILFENCE();
    private PLAYFAIL EncryptionbyPLAYFAIL = new PLAYFAIL();
    private String Input = null;
    private String PathFoder = "";
    private String PathOutputFile = "";
    private String[] GetDataImport = new String[100];
    private String KeyInput = null;
    private String ResultText = "";
    /**
     * Creates new form GuiEncryption
     */
    public GuiEncryption() {
        initComponents();
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DialogCheckPlainText = new javax.swing.JDialog();
        MessageError = new javax.swing.JLabel();
        ButtonDecrypt = new javax.swing.JButton();
        ButtonOpenFile = new javax.swing.JButton();
        TextInput = new javax.swing.JTextField();
        TextKey = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ComboBoxMethodEncryption = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        TextOutput = new javax.swing.JTextField();
        ButtonWriteFile = new javax.swing.JButton();
        ButtonEncrypt = new javax.swing.JButton();
        ShowFile = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        DialogCheckPlainText.setMinimumSize(null);
        DialogCheckPlainText.setSize(new java.awt.Dimension(500, 500));
        DialogCheckPlainText.getContentPane().setLayout(null);

        MessageError.setFont(new java.awt.Font("Tempus Sans ITC", 3, 36)); // NOI18N
        MessageError.setText("Please Enter Value ");
        DialogCheckPlainText.getContentPane().add(MessageError);
        MessageError.setBounds(0, 0, 400, 300);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        ButtonDecrypt.setText("Decrypt");
        ButtonDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDecryptActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonDecrypt);
        ButtonDecrypt.setBounds(590, 630, 90, 40);

        ButtonOpenFile.setText("OpenFile");
        ButtonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOpenFileActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonOpenFile);
        ButtonOpenFile.setBounds(990, 630, 90, 40);

        TextInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextInputActionPerformed(evt);
            }
        });
        getContentPane().add(TextInput);
        TextInput.setBounds(590, 340, 490, 70);

        TextKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextKeyActionPerformed(evt);
            }
        });
        getContentPane().add(TextKey);
        TextKey.setBounds(590, 480, 490, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Plain Text:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(290, 360, 250, 50);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Key :");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(290, 460, 250, 50);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cipher Text :");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(290, 560, 250, 50);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 2, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Program Encryption / Decription (CEASAR And VIGENERE)");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(300, 100, 1030, 60);

        ComboBoxMethodEncryption.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Chose Option Encryption", "CEASAR", "VIGENERE", "RAILFENCE", "PLAYFAIL", "DESC", " " }));
        ComboBoxMethodEncryption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxMethodEncryptionActionPerformed(evt);
            }
        });
        getContentPane().add(ComboBoxMethodEncryption);
        ComboBoxMethodEncryption.setBounds(590, 270, 490, 30);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Method encryption :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(290, 260, 250, 50);

        TextOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextOutputActionPerformed(evt);
            }
        });
        getContentPane().add(TextOutput);
        TextOutput.setBounds(590, 540, 490, 70);

        ButtonWriteFile.setText("WriteFile");
        ButtonWriteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonWriteFileActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonWriteFile);
        ButtonWriteFile.setBounds(780, 420, 90, 40);

        ButtonEncrypt.setText("Encription");
        ButtonEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEncryptActionPerformed(evt);
            }
        });
        getContentPane().add(ButtonEncrypt);
        ButtonEncrypt.setBounds(590, 420, 90, 40);

        ShowFile.setText("ShowFile");
        ShowFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowFileActionPerformed(evt);
            }
        });
        getContentPane().add(ShowFile);
        ShowFile.setBounds(990, 420, 90, 40);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/y.png"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(220, -140, 1430, 950);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOpenFileActionPerformed
                File file = new File(PathFoder);
            try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                DialogCheckPlainText.setVisible(true);
                MessageError.setText("Path in not valid");
            }
    }//GEN-LAST:event_ButtonOpenFileActionPerformed

    private void ButtonWriteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonWriteFileActionPerformed
        // TODO add your handling code here:
         if(PathOutputFile.isEmpty()){
                DialogCheckPlainText.setVisible(true);
                MessageError.setText("Path in not null");
         }else{
             try {
                BufferedWriter bw = null;
                String FileName = "ouput.txt";
                 PathFoder = PathOutputFile + FileName;
                 System.out.println(PathFoder);
                 String resultEncryption = TextOutput.getText();
                 System.out.println(resultEncryption);
                 bw = new BufferedWriter(new FileWriter(PathFoder));
                DialogCheckPlainText.setVisible(true);
                MessageError.setText("Write File Sucess");
                for(String textResult : GetDataImport){
                    if(textResult != null){
                        bw.write(textResult);
                        bw.newLine(); // Write a newline character after each element
                    }
                }
                
                 bw.close();
             } catch (IOException ex) {
                // Handle any exceptions that occur during file processing
//                ex.printStackTrace();
                DialogCheckPlainText.setVisible(true);
                MessageError.setText(ex.toString());
             }
         }
    }//GEN-LAST:event_ButtonWriteFileActionPerformed

    private void ButtonEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEncryptActionPerformed
            if(TextKey.getText().isEmpty()){
                DialogCheckPlainText.setVisible(true);
                MessageError.setText("Please Enter Key Value");
            }else{
                if(CheckMethodEncryption == "CEASAR"){
                if(TextInput.getText().isEmpty()){
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Please Enter Input Value");
                }else{
                    Input = TextInput.getText();
                    KeyInput = TextKey.getText();
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Encryption Success");
                    ResultText = EncrytionByCeasar.EncryotionCeasar(Input, Integer.parseInt(KeyInput));
                    int i = 0;
                    for(String textEncryption : GetDataImport){
                        if(textEncryption != null){
                           GetDataImport[i] = EncrytionByCeasar.EncryotionCeasar(textEncryption, Integer.parseInt(KeyInput));
                        }
                        i++;
                    }
                    TextOutput.setText(ResultText);
                    TextInput.setText("");
                }
                }else if(CheckMethodEncryption == "VIGENERE"){
                    if(TextInput.getText().isEmpty()){
                        DialogCheckPlainText.setVisible(true);
                        MessageError.setText("Please Enter Input Value");
                    }else{
                        Input = TextInput.getText();
                        KeyInput = TextKey.getText();
                        DialogCheckPlainText.setVisible(true);
                        MessageError.setText("Encryption Success");
                        String textresult = "";
                        textresult = EncryptionbyVIGENERE.EncryptionVIGENERE(Input, KeyInput);
                        TextOutput.setText(textresult);
                        TextInput.setText("");
                    }
                }else if(CheckMethodEncryption == "RAILFENCE"){
                        if(TextInput.getText().isEmpty()){
                        DialogCheckPlainText.setVisible(true);
                        MessageError.setText("Please Enter Input Value");
                    }else{
                        Input = TextInput.getText();
                        KeyInput = TextKey.getText();
                        DialogCheckPlainText.setVisible(true);
                        MessageError.setText("Encryption Success");
                        String textresult = "";
                        textresult = EncryptionbyRAILFENCE.EncryptionRAILFENCE(Input, Integer.parseInt(KeyInput));
                        TextOutput.setText(textresult);
                        TextInput.setText("");
                        }
                }else if(CheckMethodEncryption == "DESC"){
                    if(TextInput.getText().isEmpty()){
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Please Enter Input Value");
                    }else{
                    Input = TextInput.getText();
                    KeyInput = TextKey.getText();
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Encryption Success");
                    String keyString = "1000" + KeyInput; 
                    byte[] keyBytes = Arrays.copyOf(keyString.getBytes(StandardCharsets.UTF_8), 8);
                    byte[] InputBytes = Input.getBytes();
                    byte[] encryptedBytes = null;
                        try {
                            encryptedBytes = DES.encrypt(InputBytes, keyBytes);
                        } catch (Exception ex) {
                            Logger.getLogger(GuiEncryption.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    int i = 0;
                    for(String textEncryption : GetDataImport){
                        if(textEncryption != null){
                            
                           GetDataImport[i] = EncrytionByCeasar.EncryotionCeasar(textEncryption, Integer.parseInt(KeyInput));
                        }
                        i++;
                    }
                  
                        String textresult = Base64.getEncoder().encodeToString(encryptedBytes);
                    TextOutput.setText(textresult);
                    TextInput.setText("");
                    }
                }else if(CheckMethodEncryption == "PLAYFAIL"){
                    if(TextInput.getText().isEmpty()){
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Please Enter Input Value");
                    }else{
                        Input = TextInput.getText();
                        
                        DialogCheckPlainText.setVisible(true);
                        MessageError.setText("Encryption Success");
                        String textresult = "";
                        System.err.println("luthanhy"+EncryptionbyPLAYFAIL.EncryptionPLAYFAIL(Input));
                        textresult = EncryptionbyPLAYFAIL.EncryptionPLAYFAIL(Input);
                        TextOutput.setText(textresult);
                        TextInput.setText("");
                    }
                }
                else{
                    DialogCheckPlainText.setVisible(true);
                    MessageError.setText("Please Chose Method Encryption");
                }
            }

    }//GEN-LAST:event_ButtonEncryptActionPerformed

    private void TextOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextOutputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextOutputActionPerformed
    

    
    private void ComboBoxMethodEncryptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboBoxMethodEncryptionActionPerformed
        Object selectComboBoxMethod =  ComboBoxMethodEncryption.getSelectedItem();
        
        if(selectComboBoxMethod != null){
            CheckMethodEncryption = selectComboBoxMethod.toString();
        }else{
            
        }
        System.out.println("CheckMethodEncryption: " + CheckMethodEncryption);
        if(CheckMethodEncryption == "PLAYFAIL"){
            TextKey.setText("MONARCHY");
            TextKey.setEditable(false);
        }else{
            TextKey.setText("");
            TextKey.setEditable(true);
        }
    }//GEN-LAST:event_ComboBoxMethodEncryptionActionPerformed

    private void TextInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextInputActionPerformed

            // TODO add your handling code here:
            System.err.println("Log input"+Input);
    }//GEN-LAST:event_TextInputActionPerformed

    private void TextKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextKeyActionPerformed
        // TODO add your handling code here:
            System.err.println("Log input"+KeyInput);
    }//GEN-LAST:event_TextKeyActionPerformed

    private void ButtonDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDecryptActionPerformed
        
        // TODO add your handling code here:
          if(CheckMethodEncryption == "CEASAR"){
              if(TextOutput.getText().isEmpty()){
            DialogCheckPlainText.setVisible(true);
            MessageError.setText("Cipher is not Empty");
            }else{
            String resultDeEncryption =  EncrytionByCeasar.DecryptionCeasar(TextOutput.getText(),Integer.parseInt(KeyInput));
             DialogCheckPlainText.setVisible(true);
             MessageError.setText("Decryption Success");
             TextInput.setText(resultDeEncryption.toLowerCase());
             TextOutput.setText("");
            }
         }else if(CheckMethodEncryption == "VIGENERE"){
             if(TextOutput.getText().isEmpty()){
            DialogCheckPlainText.setVisible(true);
            MessageError.setText("Cipher is not Empty");
            }else{
            String resultDeEncryption =  EncryptionbyVIGENERE.DecryptionVIGENERE(TextOutput.getText(),KeyInput);
             DialogCheckPlainText.setVisible(true);
             MessageError.setText("Decryption Success");
             TextInput.setText(resultDeEncryption.toLowerCase());
             TextOutput.setText("");
             }
         }else if(CheckMethodEncryption == "RAILFENCE"){
               if(TextOutput.getText().isEmpty()){
            DialogCheckPlainText.setVisible(true);
            MessageError.setText("Cipher is not Empty");
            }else{
            String resultDeEncryption =  EncryptionbyRAILFENCE.DecryptionRAILFENCE(TextOutput.getText(),Integer.parseInt(KeyInput));
             DialogCheckPlainText.setVisible(true);
             MessageError.setText("Decryption Success");
                   System.err.println(""+resultDeEncryption);
             TextInput.setText(resultDeEncryption);
             TextOutput.setText("");
             }
         }else if(CheckMethodEncryption == "DESC")
         {
                    String newkeyString = "0" + TextKey.getText(); 
                    byte[] newkeyBytes = Arrays.copyOf(newkeyString.getBytes(StandardCharsets.UTF_8), 8);
                    System.err.println("y dep trai 2 "+TextOutput.getText());
                    byte[] newOuput = Base64.getDecoder().decode(TextOutput.getText());
//                    byte[] OUTPUT = TextOutput.getText().getBytes();
                    System.err.println("y dep trai "+ newOuput);
                    byte[] dencryptedBytes = null;
                        try {
                            dencryptedBytes = DES.decrypt(newOuput, newkeyBytes);
                        } catch (Exception ex) {
                            Logger.getLogger(GuiEncryption.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        String textresult = Base64.getEncoder().encodeToString(dencryptedBytes);
                        TextInput.setText(textresult);
         }else if(CheckMethodEncryption == "PLAYFAIL"){
             if(TextOutput.getText().isEmpty()){
            DialogCheckPlainText.setVisible(true);
            MessageError.setText("Cipher is not Empty");
            }else{
            String resultDeEncryption =  EncryptionbyPLAYFAIL.DecryptionPLAYFAIL(TextOutput.getText());
             DialogCheckPlainText.setVisible(true);
             MessageError.setText("Decryption Success");
                   System.err.println(""+resultDeEncryption);
             TextInput.setText(resultDeEncryption);
             TextOutput.setText("");
            }
         }
         else{
               DialogCheckPlainText.setVisible(true);
               MessageError.setText("Please Chose Method Encryption");
         }
        
    }//GEN-LAST:event_ButtonDecryptActionPerformed

    private void ShowFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowFileActionPerformed
        // TODO add your handling code here:
          JFileChooser fileChooser = new JFileChooser();
          fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Text files (*.txt)", "txt"));

          int resultchosefile = fileChooser.showOpenDialog(null);
          if(resultchosefile  == JFileChooser.APPROVE_OPTION){
               File selectedFile = fileChooser.getSelectedFile();
                String filePath = selectedFile.getAbsolutePath();
                if (filePath.endsWith(".txt")) {
                    filePath = filePath.substring(0, filePath.length() - selectedFile.getName().length());
                }
                PathOutputFile = filePath;
    try {
                // Create a BufferedReader to read the chosen file
                BufferedReader br = new BufferedReader(new FileReader(selectedFile));
                DialogCheckPlainText.setVisible(true);
                MessageError.setText("Import data Success");
                // Read the file line by line
                String line;
                int i = 0;
                StringBuilder allLines = new StringBuilder();
                while ((line = br.readLine()) != null) {
                    // Process each line as neede
                    GetDataImport[i] = line;
                    allLines.append(line).append("\n"); // Append each line to the StringBuilder
                    i++;
                }
                System.out.println(allLines.toString());
                TextInput.setText(allLines.toString());
                // Close the BufferedReader
                br.close();
            } catch (IOException ex) {
                // Handle any exceptions that occur during file processing
                ex.printStackTrace();
            }
          }
          
//        try {
//            BufferedReader br = null;
//            br
//        } catch (Exception ex) {
//            
//        }
    }//GEN-LAST:event_ShowFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuiEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuiEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuiEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuiEncryption.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
            GuiEncryption gui = new GuiEncryption();
            gui.setVisible(true);
            gui.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH); // Maximize the window
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonDecrypt;
    private javax.swing.JButton ButtonEncrypt;
    private javax.swing.JButton ButtonOpenFile;
    private javax.swing.JButton ButtonWriteFile;
    private javax.swing.JComboBox ComboBoxMethodEncryption;
    private javax.swing.JDialog DialogCheckPlainText;
    private javax.swing.JLabel MessageError;
    private javax.swing.JButton ShowFile;
    private javax.swing.JTextField TextInput;
    private javax.swing.JTextField TextKey;
    private javax.swing.JTextField TextOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    // End of variables declaration//GEN-END:variables
}
